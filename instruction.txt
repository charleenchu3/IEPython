Python Skill Exercise
<Introduction>
Image Engine’s pipeline makes heavy use of customizable configs which then uses a registration mechanism to add (or edit) functionalities. As such, we believe a good skill exercise would be to implement a registration mechanism using python.
Instructions

- Build a python module that provides a way to register operations to be performed on files or directories. You can then query the registration system for which operations are available for a given path or list of paths.

- Examples of operations could be things like printing information about the file, compressing, converting or opening it, or any number of other similar operations.

- An operation should only be enabled if it’s valid for a given path (ex: a delete operation may not be allowed for a read only file, or an uncompress operation would only be allowed for supported file extensions).

- You don’t need to actually implement any of those operations in a way that they are functional, but you are required to write unit tests to make sure that the underlying registration mechanism works. In other words, a compression operation, for this exercise, doesn’t actually need to compress anything. It just needs to have a way to indicate that the file would have been compressed for the unit tests.
Feel free to contact Ivan Imanishi (ivani@image-engine.com) if you have any questions throughout the process.

<Results>
Send the code to Ivan Imanishi (ivani@image-engine.com), or make it available somewhere (ex:
github.com) and send the link. 

############################################################################
<Potential improvements>
The following are not required by the skill exercise, but are examples of topics we could discuss in a follow up interview in order to get to know you better and how you think and approach problems:
   
• How do you think a system like this (not specifically about filesystem paths) could benefit a vfx/animation pipeline?
• What additions might be necessary in order to integrate it with a user interface?
• If performance, when determining which operations to return, becomes an issue (either
because we received a large number of entries, or the check itself is slow) what would
be potential options to explore in order to speed things up? • Any other ideas for possible improvements?


<SCRATCH>
2 usage:
    1. Query actions available for the path
    2. Register actions for the paths

